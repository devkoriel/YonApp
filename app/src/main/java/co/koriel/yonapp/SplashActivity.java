//
// Copyright 2016 Amazon.com, Inc. or its affiliates (Amazon). All Rights Reserved.
//
// Code generated by AWS Mobile Hub. Amazon gives unlimited permission to 
// copy, distribute and modify it.
//
// Source code generated from template: aws-my-sample-app-android v0.9
//
package co.koriel.yonapp;

import android.app.Activity;
import android.content.Intent;
import android.os.Build;
import android.os.Bundle;
import android.provider.Settings;
import android.support.v4.content.ContextCompat;
import android.view.MotionEvent;
import android.view.Window;
import android.view.WindowManager;
import android.widget.Toast;

import com.amazonaws.mobileconnectors.dynamodbv2.dynamodbmapper.DynamoDBMapper;

import java.util.ArrayList;
import java.util.concurrent.CountDownLatch;

import co.amazonaws.mobile.AWSMobileClient;
import co.amazonaws.mobile.user.IdentityManager;
import co.amazonaws.mobile.user.IdentityProvider;
import co.amazonaws.mobile.user.signin.SignInManager;
import co.amazonaws.mobile.user.signin.SignInProvider;
import co.amazonaws.models.nosql.BlackListDO;
import co.amazonaws.models.nosql.UserInfoDO;
import co.koriel.yonapp.db.DataBase;
import co.koriel.yonapp.util.Crypto;

/**
 * Splash Activity is the start-up activity that appears until a delay is expired
 * or the user taps the screen.  When the splash activity starts, various app
 * initialization operations are performed.
 */
public class SplashActivity extends Activity {
    private static final String LOG_TAG = SplashActivity.class.getSimpleName();

    private final CountDownLatch timeoutLatch = new CountDownLatch(1);
    private SignInManager signInManager;

    private DynamoDBMapper dynamoDBMapper;

    /**
     * SignInResultsHandler handles the results from sign-in for a previously signed in user.
     */
    private class SignInResultsHandler implements IdentityManager.SignInResultsHandler {
        @Override
        public void onSuccess(final IdentityProvider provider) {
            dynamoDBMapper = AWSMobileClient.defaultMobileClient().getDynamoDBMapper();

            Crypto.androidId = Settings.Secure.getString(getApplicationContext().getContentResolver(), Settings.Secure.ANDROID_ID);

            // The sign-in manager is no longer needed once signed in.
            SignInManager.dispose();

            new Thread() {
                public void run() {
                    DataBase.userInfo.setUserId(AWSMobileClient.defaultMobileClient().getIdentityManager().getCachedUserID());
                     if (DataBase.userInfo.getStudentId() == null || DataBase.userInfo.getStudentPasswd() == null) {
                         DataBase.userInfo = dynamoDBMapper.load(UserInfoDO.class, AWSMobileClient.defaultMobileClient().getIdentityManager().getCachedUserID());
                         try {
                             Crypto.decryptPbkdf2(DataBase.userInfo.getStudentPasswd());
                         } catch (Exception e) {
                             AWSMobileClient.defaultMobileClient().getIdentityManager().signOut();
                             goSignIn();
                             runOnUiThread(new Runnable() {
                                 public void run() {
                                     Toast.makeText(SplashActivity.this, R.string.please_login_again, Toast.LENGTH_SHORT).show();
                                 }
                             });
                             interrupt();
                         }
                     }

                    if (!isInterrupted()) {
                        BlackListDO blackList = dynamoDBMapper.load(BlackListDO.class, DataBase.userInfo.getStudentId());

                        if (blackList != null) {
                            dynamoDBMapper.delete(DataBase.userInfo);
                            AWSMobileClient.defaultMobileClient().getIdentityManager().signOut();
                            goSignIn();

                            runOnUiThread(new Runnable() {
                                @Override
                                public void run() {
                                    Toast.makeText(SplashActivity.this, R.string.blocked_user, Toast.LENGTH_LONG).show();
                                }
                            });
                        } else {
                            dynamoDBMapper.save(DataBase.userInfo);
                            AWSMobileClient.defaultMobileClient()
                                    .getIdentityManager()
                                    .loadUserInfoAndImage(provider, new Runnable() {
                                        @Override
                                        public void run() {
                                            goMain();
                                        }
                                    });
                        }
                    }
                }
            }.start();
        }

        @Override
        public void onCancel(final IdentityProvider provider) {
        }

        @Override
        public void onError(final IdentityProvider provider, Exception ex) {

            Toast.makeText(SplashActivity.this, R.string.login_fail, Toast.LENGTH_LONG).show();
            goSignIn();

        }
    }

    @Override
    protected void onCreate(Bundle savedInstanceState) {

        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_splash);

        if (Build.VERSION.SDK_INT >= 21) {
            Window window = getWindow();
            window.addFlags(WindowManager.LayoutParams.FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDS);
            window.clearFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS);
            window.setStatusBarColor(ContextCompat.getColor(getApplicationContext(), R.color.top_bar_background));
        }

        final Thread thread = new Thread(new Runnable() {
            public void run() {
                signInManager = SignInManager.getInstance(SplashActivity.this);

                final SignInProvider provider = signInManager.getPreviouslySignedInProvider();

                // if the user was already previously in to a provider.
                if (provider != null) {
                    // asynchronously handle refreshing credentials and call our handler.
                    signInManager.refreshCredentialsWithProvider(SplashActivity.this,
                        provider, new SignInResultsHandler());
                } else {
                    // Asyncronously go to the sign-in page (after the splash delay has expired).
                    goSignIn();
                }

                // Wait for the splash timeout.
                try {
                    Thread.sleep(2000);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

                // Expire the splash page delay.
                timeoutLatch.countDown();
            }
        });
        thread.start();
    }

    @Override
    public boolean onTouchEvent(MotionEvent event) {
        // Touch event bypasses waiting for the splash timeout to expire.
        timeoutLatch.countDown();
        return true;
    }

    private void goAfterSplashTimeout(final Intent intent) {
        final Thread thread = new Thread(new Runnable() {
            public void run() {
                // wait for the splash timeout expiry or for the user to tap.
                try {
                    timeoutLatch.await();
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

                SplashActivity.this.runOnUiThread(new Runnable() {
                    public void run() {
                        startActivity(intent);
                        // finish should always be called on the main thread.
                        finish();
                    }
                });
            }
        });
        thread.start();
    }

    /**
     * Go to the main activity after the splash timeout has expired.
     */
    protected void goMain() {
        Intent goMainIntent = new Intent(this, MainActivity.class);

        ArrayList<String> arrayList = getIntent().getStringArrayListExtra("arrayList");
        if (arrayList != null) {
            goMainIntent.putStringArrayListExtra("arrayList", arrayList);
        }

        goAfterSplashTimeout(goMainIntent);
    }

    /**
     * Go to the sign in activity after the splash timeout has expired.
     */
    protected void goSignIn() {
        goAfterSplashTimeout(new Intent(this, SignInActivity.class));
    }

    @Override
    protected void onResume() {
        super.onResume();

        // pause/resume Mobile Analytics collection
        AWSMobileClient.defaultMobileClient().handleOnResume();
    }

    @Override
    protected void onPause() {
        super.onPause();

        // pause/resume Mobile Analytics collection
        AWSMobileClient.defaultMobileClient().handleOnPause();
    }
}
